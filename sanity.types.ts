/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type LinktreeLink = {
  _type: 'linktreeLink'
  label?: string
  description?: string
  linkUrl?: string
}

export type TripSubfeature = {
  _type: 'tripSubfeature'
  subfeature?: string
}

export type TripFeature = {
  _type: 'tripFeature'
  feature?: string
  subfeatures?: Array<
    {
      _key: string
    } & TripSubfeature
  >
}

export type FuelFeature = {
  _type: 'fuelFeature'
  icon?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  continent?: string
  airports?: number
}

export type Testimonial = {
  _type: 'testimonial'
  quote?: string
  author?: {
    name?: string
    role?: string
    location?: string
  }
}

export type Partner = {
  _type: 'partner'
  name?: string
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
}

export type Location = {
  _type: 'location'
  city?: string
  country?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  isHq?: boolean
  address?: string
  coordinates?: Geopoint
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type ContactItem = {
  _type: 'contactItem'
  url?: string
  cta?: string
  label?: string
}

export type Stat = {
  _type: 'stat'
  label?: string
  value?: string
}

export type PortableText = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<{
    href?: string
    _type: 'link'
    _key: string
  }>
  level?: number
  _type: 'block'
  _key: string
}>

export type Gallery = Array<{
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
  }
  hotspot?: SanityImageHotspot
  crop?: SanityImageCrop
  alt?: string
  _type: 'image'
  _key: string
}>

export type Milestone = {
  _type: 'milestone'
  title?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  tags?: Array<string>
  duration?: Duration
}

export type Duration = {
  _type: 'duration'
  start?: string
  end?: string
}

export type Policy = {
  _id: string
  _type: 'policy'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  content?: PortableText
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Linktree = {
  _id: string
  _type: 'linktree'
  _createdAt: string
  _updatedAt: string
  _rev: string
  links?: Array<
    {
      _key: string
    } & LinktreeLink
  >
  socials?: Array<
    {
      _key: string
    } & ContactItem
  >
}

export type Inquiry = {
  _id: string
  _type: 'inquiry'
  _createdAt: string
  _updatedAt: string
  _rev: string
  formSection?: {
    section?: Section
  }
}

export type TripService = {
  _id: string
  _type: 'tripService'
  _createdAt: string
  _updatedAt: string
  _rev: string
  card?: Card
  heroSection?: {
    section?: Section
  }
  featuresSection?: {
    section?: Section
    features?: Array<
      {
        _key: string
      } & TripFeature
    >
  }
  gallerySection?: {
    section?: Section
    gallery?: Gallery
  }
}

export type FuelService = {
  _id: string
  _type: 'fuelService'
  _createdAt: string
  _updatedAt: string
  _rev: string
  card?: Card
  heroSection?: {
    section?: Section
  }
  featuresSection?: {
    section?: Section
    features?: Array<
      {
        _key: string
      } & FuelFeature
    >
  }
  gallerySection?: {
    section?: Section
    gallery?: Gallery
  }
}

export type Card = {
  _type: 'card'
  title?: string
  tagline?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
}

export type Services = {
  _id: string
  _type: 'services'
  _createdAt: string
  _updatedAt: string
  _rev: string
  heroSection?: {
    section?: Section
  }
}

export type Newsletter = {
  _id: string
  _type: 'newsletter'
  _createdAt: string
  _updatedAt: string
  _rev: string
  formSection?: {
    section?: Section
  }
}

export type Contact = {
  _id: string
  _type: 'contact'
  _createdAt: string
  _updatedAt: string
  _rev: string
  contactSection?: {
    section?: Section
    contacts?: Array<
      {
        _key: string
      } & ContactItem
    >
  }
  locationSection?: {
    section?: Section
    locations?: Array<
      {
        _key: string
      } & Location
    >
  }
}

export type About = {
  _id: string
  _type: 'about'
  _createdAt: string
  _updatedAt: string
  _rev: string
  storySection?: {
    section?: Section
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }>
  }
  statsSection?: {
    stats?: Array<
      {
        _key: string
      } & Stat
    >
  }
  teamSection?: {
    section?: Section
  }
}

export type Home = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  heroSection?: {
    section?: Section
    video?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
      }
      _type: 'file'
    }
  }
  servicesSection?: {
    section?: Section
  }
  testimonialsSection?: {
    section?: Section
    testimonials?: Array<
      {
        _key: string
      } & Testimonial
    >
  }
  partnersSection?: {
    section?: Section
    partners?: Array<
      {
        _key: string
      } & Partner
    >
  }
  contactSection?: {
    section?: Section
  }
  newsletterSection?: {
    section?: Section
  }
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Section = {
  _type: 'section'
  heading?: string
  hasTagline?: boolean
  tagline?: string
  hasSummary?: boolean
  summary?: PortableText
  hasImage?: boolean
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | LinktreeLink
  | TripSubfeature
  | TripFeature
  | FuelFeature
  | Testimonial
  | Partner
  | Location
  | Geopoint
  | ContactItem
  | Stat
  | PortableText
  | Gallery
  | Milestone
  | Duration
  | Policy
  | Slug
  | Linktree
  | Inquiry
  | TripService
  | FuelService
  | Card
  | Services
  | Newsletter
  | Contact
  | About
  | Home
  | SanityFileAsset
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Section
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/sanity/lib/queries.ts
// Variable: homePageQuery
// Query: *[_type == "home"][0]{    heroSection{		section,		"video": video.asset->url	},	servicesSection{		section,		"tripService": *[_type == "tripService"][0]{			card		},		"fuelService": *[_type == "fuelService"][0]{			card		},	},	testimonialsSection,	partnersSection,	contactSection,	newsletterSection,}
export type HomePageQueryResult = {
  heroSection: {
    section: Section | null
    video: string | null
  } | null
  servicesSection: {
    section: Section | null
    tripService: {
      card: Card | null
    } | null
    fuelService: {
      card: Card | null
    } | null
  } | null
  testimonialsSection: {
    section?: Section
    testimonials?: Array<
      {
        _key: string
      } & Testimonial
    >
  } | null
  partnersSection: {
    section?: Section
    partners?: Array<
      {
        _key: string
      } & Partner
    >
  } | null
  contactSection: {
    section?: Section
  } | null
  newsletterSection: {
    section?: Section
  } | null
} | null
// Variable: aboutPageQuery
// Query: *[_type == "about"][0]{		storySection,		teamSection,		statsSection}
export type AboutPageQueryResult = {
  storySection: {
    section?: Section
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<{
        href?: string
        _type: 'link'
        _key: string
      }>
      level?: number
      _type: 'block'
      _key: string
    }>
  } | null
  teamSection: {
    section?: Section
  } | null
  statsSection: {
    stats?: Array<
      {
        _key: string
      } & Stat
    >
  } | null
} | null
// Variable: footerQuery
// Query: {  "policies": *[_type == "policy"]{    "id": _id,    title,    "slug": slug.current,    content,  },  "newsletter": *[_type == "home"][0]{    "section": newsletterSection.section,  }}
export type FooterQueryResult = {
  policies: Array<{
    id: string
    title: string | null
    slug: string | null
    content: PortableText | null
  }>
  newsletter: {
    section: Section | null
  } | null
}
// Variable: homePageTitleQuery
// Query: *[_type == "home"][0].title
export type HomePageTitleQueryResult = null
// Variable: pagesBySlugQuery
// Query: *[_type == "page" && slug.current == $slug][0] {    _id,    body,    overview,    title,    "slug": slug.current,  }
export type PagesBySlugQueryResult = null
// Variable: projectBySlugQuery
// Query: *[_type == "project" && slug.current == $slug][0] {    _id,    client,    coverImage,    description,    duration,    overview,    site,    "slug": slug.current,    tags,    title,  }
export type ProjectBySlugQueryResult = null
// Variable: projectPaths
// Query: *[_type == "project" && slug.current != null].slug.current
export type ProjectPathsResult = Array<never>
// Variable: pagePaths
// Query: *[_type == "page" && slug.current != null].slug.current
export type PagePathsResult = Array<never>
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    footer,    menuItems[]->{      _type,      "slug": slug.current,      title    },    ogImage,  }
export type SettingsQueryResult = null
// Variable: servicesPageQuery
// Query: *[_type == "services"][0]{		title,		heroSection,		"tripService": *[_type == "tripService"][0]{			card		},		"fuelService": *[_type == "fuelService"][0]{			card		}, }
export type ServicesPageQueryResult = {
  title: null
  heroSection: {
    section?: Section
  } | null
  tripService: {
    card: Card | null
  } | null
  fuelService: {
    card: Card | null
  } | null
} | null
// Variable: tripServicePageQuery
// Query: *[_type == "tripService"][0]{		heroSection,		featuresSection,		gallerySection, }
export type TripServicePageQueryResult = {
  heroSection: {
    section?: Section
  } | null
  featuresSection: {
    section?: Section
    features?: Array<
      {
        _key: string
      } & TripFeature
    >
  } | null
  gallerySection: {
    section?: Section
    gallery?: Gallery
  } | null
} | null
// Variable: fuelServicePageQuery
// Query: *[_type == "fuelService"][0]{	heroSection,	featuresSection,	gallerySection,}
export type FuelServicePageQueryResult = {
  heroSection: {
    section?: Section
  } | null
  featuresSection: {
    section?: Section
    features?: Array<
      {
        _key: string
      } & FuelFeature
    >
  } | null
  gallerySection: {
    section?: Section
    gallery?: Gallery
  } | null
} | null
// Variable: contactPageQuery
// Query: *[_type == "contact"][0]{		contactSection,		locationSection}
export type ContactPageQueryResult = {
  contactSection: {
    section?: Section
    contacts?: Array<
      {
        _key: string
      } & ContactItem
    >
  } | null
  locationSection: {
    section?: Section
    locations?: Array<
      {
        _key: string
      } & Location
    >
  } | null
} | null
// Variable: newsletterPageQuery
// Query: *[_type == "newsletter"][0]{		formSection}
export type NewsletterPageQueryResult = {
  formSection: {
    section?: Section
  } | null
} | null
// Variable: inquiryPageQuery
// Query: *[_type == "inquiry"][0]{		formSection}
export type InquiryPageQueryResult = {
  formSection: {
    section?: Section
  } | null
} | null
// Variable: linktreePageQuery
// Query: *[_type == "linktree"][0]{		heroSection,    links}
export type LinktreePageQueryResult = {
  heroSection: null
  links: Array<
    {
      _key: string
    } & LinktreeLink
  > | null
} | null
// Variable: policyBySlugQuery
// Query: *[_type == "policy" && slug.current == $slug][0] {    "id": _id,    "updatedAt": _updatedAt,    title,    "slug": slug.current,    content,  }
export type PolicyBySlugQueryResult = {
  id: string
  updatedAt: string
  title: string | null
  slug: string | null
  content: PortableText | null
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "home"][0]{\n    heroSection{\n\t\tsection,\n\t\t"video": video.asset->url\n\t},\n\tservicesSection{\n\t\tsection,\n\t\t"tripService": *[_type == "tripService"][0]{\n\t\t\tcard\n\t\t},\n\t\t"fuelService": *[_type == "fuelService"][0]{\n\t\t\tcard\n\t\t},\n\t},\n\ttestimonialsSection,\n\tpartnersSection,\n\tcontactSection,\n\tnewsletterSection,\n}': HomePageQueryResult
    '\n\t*[_type == "about"][0]{\n\t\tstorySection,\n\t\tteamSection,\n\t\tstatsSection\n}': AboutPageQueryResult
    '\n{\n  "policies": *[_type == "policy"]{\n    "id": _id,\n    title,\n    "slug": slug.current,\n    content,\n  },\n  "newsletter": *[_type == "home"][0]{\n    "section": newsletterSection.section,\n  }\n}\n': FooterQueryResult
    '\n  *[_type == "home"][0].title\n': HomePageTitleQueryResult
    '\n  *[_type == "page" && slug.current == $slug][0] {\n    _id,\n    body,\n    overview,\n    title,\n    "slug": slug.current,\n  }\n': PagesBySlugQueryResult
    '\n  *[_type == "project" && slug.current == $slug][0] {\n    _id,\n    client,\n    coverImage,\n    description,\n    duration,\n    overview,\n    site,\n    "slug": slug.current,\n    tags,\n    title,\n  }\n': ProjectBySlugQueryResult
    '\n  *[_type == "project" && slug.current != null].slug.current\n': ProjectPathsResult
    '\n  *[_type == "page" && slug.current != null].slug.current\n': PagePathsResult
    '\n  *[_type == "settings"][0]{\n    footer,\n    menuItems[]->{\n      _type,\n      "slug": slug.current,\n      title\n    },\n    ogImage,\n  }\n': SettingsQueryResult
    '\n\t*[_type == "services"][0]{\n\t\ttitle,\n\t\theroSection,\n\t\t"tripService": *[_type == "tripService"][0]{\n\t\t\tcard\n\t\t},\n\t\t"fuelService": *[_type == "fuelService"][0]{\n\t\t\tcard\n\t\t},\n }': ServicesPageQueryResult
    '\n\t*[_type == "tripService"][0]{\n\t\theroSection,\n\t\tfeaturesSection,\n\t\tgallerySection,\n }': TripServicePageQueryResult
    '\n*[_type == "fuelService"][0]{\n\theroSection,\n\tfeaturesSection,\n\tgallerySection,\n}': FuelServicePageQueryResult
    '\n\t*[_type == "contact"][0]{\n\t\tcontactSection,\n\t\tlocationSection\n}': ContactPageQueryResult
    '\n\t*[_type == "newsletter"][0]{\n\t\tformSection\n}': NewsletterPageQueryResult
    '\n\t*[_type == "inquiry"][0]{\n\t\tformSection\n}': InquiryPageQueryResult
    '\n\t*[_type == "linktree"][0]{\n\t\theroSection,\n    links\n}': LinktreePageQueryResult
    '\n  *[_type == "policy" && slug.current == $slug][0] {\n    "id": _id,\n    "updatedAt": _updatedAt,\n    title,\n    "slug": slug.current,\n    content,\n  }\n': PolicyBySlugQueryResult
  }
}
