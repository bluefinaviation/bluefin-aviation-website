/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type EmptyLeg = {
  _id: string;
  _type: "emptyLeg";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  from?: Destination;
  to?: Destination;
  departureTime?: string;
  arrivalTime?: string;
  originalPrice?: number;
  discountedPrice?: number;
};

export type Destination = {
  _type: "destination";
  city?: string;
  countryCode?: string;
  airportCode?: string;
};

export type Plane = {
  _id: string;
  _type: "plane";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  model?: string;
  manufacturer?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "planeManufacturer";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "planeCategory";
  };
  code?: string;
  capacity?: number;
  speed?: number;
  range?: number;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type PlaneCategory = {
  _id: string;
  _type: "planeCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type PlaneManufacturer = {
  _id: string;
  _type: "planeManufacturer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type LinktreeLink = {
  _type: "linktreeLink";
  label?: string;
  description?: string;
  linkUrl?: string;
};

export type TripSubfeature = {
  _type: "tripSubfeature";
  subfeature?: string;
};

export type TripFeature = {
  _type: "tripFeature";
  feature?: string;
  subfeatures?: Array<{
    _key: string;
  } & TripSubfeature>;
};

export type FuelFeature = {
  _type: "fuelFeature";
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  continent?: string;
  airports?: number;
};

export type Testimonial = {
  _type: "testimonial";
  quote?: string;
  author?: {
    name?: string;
    role?: string;
    location?: string;
  };
};

export type Partner = {
  _type: "partner";
  name?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Location = {
  _type: "location";
  city?: string;
  country?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  isHq?: boolean;
  address?: string;
  coordinates?: Geopoint;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type ContactItem = {
  _type: "contactItem";
  url?: string;
  cta?: string;
  label?: string;
};

export type Stat = {
  _type: "stat";
  label?: string;
  value?: string;
};

export type PortableText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Gallery = Array<{
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Policy = {
  _id: string;
  _type: "policy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: PortableText;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Linktree = {
  _id: string;
  _type: "linktree";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  links?: Array<{
    _key: string;
  } & LinktreeLink>;
  socials?: Array<{
    _key: string;
  } & ContactItem>;
};

export type Inquiry = {
  _id: string;
  _type: "inquiry";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  formSection?: {
    section?: Section;
  };
};

export type TripService = {
  _id: string;
  _type: "tripService";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  card?: Card;
  heroSection?: {
    section?: Section;
  };
  featuresSection?: {
    section?: Section;
    features?: Array<{
      _key: string;
    } & TripFeature>;
  };
  gallerySection?: {
    section?: Section;
    gallery?: Gallery;
  };
};

export type FuelService = {
  _id: string;
  _type: "fuelService";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  card?: Card;
  heroSection?: {
    section?: Section;
  };
  featuresSection?: {
    section?: Section;
    features?: Array<{
      _key: string;
    } & FuelFeature>;
  };
  gallerySection?: {
    section?: Section;
    gallery?: Gallery;
  };
};

export type Card = {
  _type: "card";
  title?: string;
  tagline?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Services = {
  _id: string;
  _type: "services";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heroSection?: {
    section?: Section;
  };
};

export type Newsletter = {
  _id: string;
  _type: "newsletter";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  formSection?: {
    section?: Section;
  };
};

export type Contact = {
  _id: string;
  _type: "contact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  contactSection?: {
    section?: Section;
    contacts?: Array<{
      _key: string;
    } & ContactItem>;
  };
  locationSection?: {
    section?: Section;
    locations?: Array<{
      _key: string;
    } & Location>;
  };
};

export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  storySection?: {
    section?: Section;
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  statsSection?: {
    stats?: Array<{
      _key: string;
    } & Stat>;
  };
  teamSection?: {
    section?: Section;
  };
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heroSection?: {
    section?: Section;
    video?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      _type: "file";
    };
  };
  servicesSection?: {
    section?: Section;
  };
  brokerSection?: {
    section?: Section;
  };
  testimonialsSection?: {
    section?: Section;
    testimonials?: Array<{
      _key: string;
    } & Testimonial>;
  };
  partnersSection?: {
    section?: Section;
    partners?: Array<{
      _key: string;
    } & Partner>;
  };
  contactSection?: {
    section?: Section;
  };
  newsletterSection?: {
    section?: Section;
  };
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Section = {
  _type: "section";
  heading?: string;
  hasTagline?: boolean;
  tagline?: string;
  hasSummary?: boolean;
  summary?: PortableText;
  hasImage?: boolean;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | EmptyLeg | Destination | Plane | PlaneCategory | PlaneManufacturer | LinktreeLink | TripSubfeature | TripFeature | FuelFeature | Testimonial | Partner | Location | Geopoint | ContactItem | Stat | PortableText | Gallery | Policy | Slug | Linktree | Inquiry | TripService | FuelService | Card | Services | Newsletter | Contact | About | Home | SanityFileAsset | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Section;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: HOME_PAGE_QUERY
// Query: *[_type == "home"][0]{    heroSection{		section,		"video": video.asset->url	},	servicesSection{		section,		"tripService": *[_type == "tripService"][0]{			card		},		"fuelService": *[_type == "fuelService"][0]{			card		},	},	brokerSection,	testimonialsSection,	partnersSection,	contactSection,	newsletterSection,}
export type HOME_PAGE_QUERYResult = {
  heroSection: {
    section: Section | null;
    video: string | null;
  } | null;
  servicesSection: {
    section: Section | null;
    tripService: {
      card: Card | null;
    } | null;
    fuelService: {
      card: Card | null;
    } | null;
  } | null;
  brokerSection: {
    section?: Section;
  } | null;
  testimonialsSection: {
    section?: Section;
    testimonials?: Array<{
      _key: string;
    } & Testimonial>;
  } | null;
  partnersSection: {
    section?: Section;
    partners?: Array<{
      _key: string;
    } & Partner>;
  } | null;
  contactSection: {
    section?: Section;
  } | null;
  newsletterSection: {
    section?: Section;
  } | null;
} | null;
// Variable: FLEET_PAGE_QUERY
// Query: *[_type == "plane"]{		model,		"manufacturer": manufacturer->name,		"category": category->name,		code,		capacity,		speed,		range,		image	}
export type FLEET_PAGE_QUERYResult = Array<{
  model: string | null;
  manufacturer: string | null;
  category: string | null;
  code: string | null;
  capacity: number | null;
  speed: number | null;
  range: number | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
}>;
// Variable: ABOUT_PAGE_QUERY
// Query: *[_type == "about"][0]{		storySection,		teamSection,		statsSection}
export type ABOUT_PAGE_QUERYResult = {
  storySection: {
    section?: Section;
    bio?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  teamSection: {
    section?: Section;
  } | null;
  statsSection: {
    stats?: Array<{
      _key: string;
    } & Stat>;
  } | null;
} | null;
// Variable: CONTACT_PAGE_QUERY
// Query: *[_type == "contact"][0]{		contactSection,		locationSection}
export type CONTACT_PAGE_QUERYResult = {
  contactSection: {
    section?: Section;
    contacts?: Array<{
      _key: string;
    } & ContactItem>;
  } | null;
  locationSection: {
    section?: Section;
    locations?: Array<{
      _key: string;
    } & Location>;
  } | null;
} | null;
// Variable: POLICY_BY_SLUG_QUERY
// Query: *[_type == "policy" && slug.current == $slug][0] {    "id": _id,    "updatedAt": _updatedAt,    title,    "slug": slug.current,    content,  }
export type POLICY_BY_SLUG_QUERYResult = {
  id: string;
  updatedAt: string;
  title: string | null;
  slug: string | null;
  content: PortableText | null;
} | null;
// Variable: FUEL_SERVICE_PAGE_QUERY
// Query: *[_type == "fuelService"][0]{		heroSection,		featuresSection,		gallerySection,	}
export type FUEL_SERVICE_PAGE_QUERYResult = {
  heroSection: {
    section?: Section;
  } | null;
  featuresSection: {
    section?: Section;
    features?: Array<{
      _key: string;
    } & FuelFeature>;
  } | null;
  gallerySection: {
    section?: Section;
    gallery?: Gallery;
  } | null;
} | null;
// Variable: LINKTREE_PAGE_QUERY
// Query: *[_type == "linktree"][0]{		heroSection,    links}
export type LINKTREE_PAGE_QUERYResult = {
  heroSection: null;
  links: Array<{
    _key: string;
  } & LinktreeLink> | null;
} | null;
// Variable: SERVICES_PAGE_QUERY
// Query: *[_type == "services"][0]{		title,		heroSection,		"tripService": *[_type == "tripService"][0]{			card		},		"fuelService": *[_type == "fuelService"][0]{			card		},	}
export type SERVICES_PAGE_QUERYResult = {
  title: null;
  heroSection: {
    section?: Section;
  } | null;
  tripService: {
    card: Card | null;
  } | null;
  fuelService: {
    card: Card | null;
  } | null;
} | null;
// Variable: TRIP_SERVICE_PAGE_QUERY
// Query: *[_type == "tripService"][0]{		heroSection,		featuresSection,		gallerySection,	}
export type TRIP_SERVICE_PAGE_QUERYResult = {
  heroSection: {
    section?: Section;
  } | null;
  featuresSection: {
    section?: Section;
    features?: Array<{
      _key: string;
    } & TripFeature>;
  } | null;
  gallerySection: {
    section?: Section;
    gallery?: Gallery;
  } | null;
} | null;
// Variable: FOOTER_QUERY
// Query: {		"policies": *[_type == "policy"]{			"id": _id, 			title,			"slug": slug.current,			content,		},		"newsletter": *[_type == "home"][0]{			"section": newsletterSection.section,		}	}
export type FOOTER_QUERYResult = {
  policies: Array<{
    id: string;
    title: string | null;
    slug: string | null;
    content: PortableText | null;
  }>;
  newsletter: {
    section: Section | null;
  } | null;
};
// Variable: ALL_PLANE_CATEGORIES_QUERY
// Query: *[_type == "planeCategory"]{    _id,    name  }
export type ALL_PLANE_CATEGORIES_QUERYResult = Array<{
  _id: string;
  name: string | null;
}>;
// Variable: ALL_PLANE_MANUFACTURERS_QUERY
// Query: *[_type == "planeManufacturer"]{    _id,    name  }
export type ALL_PLANE_MANUFACTURERS_QUERYResult = Array<{
  _id: string;
  name: string | null;
}>;
// Variable: INQUIRY_PAGE_QUERY
// Query: *[_type == "inquiry"][0]{		heroSection,		formSection	}
export type INQUIRY_PAGE_QUERYResult = {
  heroSection: null;
  formSection: {
    section?: Section;
  } | null;
} | null;
// Variable: NEWSLETTER_PAGE_QUERY
// Query: *[_type == "newsletter"][0]{		heroSection,		formSection	}
export type NEWSLETTER_PAGE_QUERYResult = {
  heroSection: null;
  formSection: {
    section?: Section;
  } | null;
} | null;
// Variable: EMPTY_LEGS_QUERY
// Query: *[_type == "emptyLeg"] {		from,		to,		departureTime,		arrivalTime,	}
export type EMPTY_LEGS_QUERYResult = Array<{
  from: Destination | null;
  to: Destination | null;
  departureTime: string | null;
  arrivalTime: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"home\"][0]{\n    heroSection{\n\t\tsection,\n\t\t\"video\": video.asset->url\n\t},\n\tservicesSection{\n\t\tsection,\n\t\t\"tripService\": *[_type == \"tripService\"][0]{\n\t\t\tcard\n\t\t},\n\t\t\"fuelService\": *[_type == \"fuelService\"][0]{\n\t\t\tcard\n\t\t},\n\t},\n\tbrokerSection,\n\ttestimonialsSection,\n\tpartnersSection,\n\tcontactSection,\n\tnewsletterSection,\n}": HOME_PAGE_QUERYResult;
    "\n\t*[_type == \"plane\"]{\n\t\tmodel,\n\t\t\"manufacturer\": manufacturer->name,\n\t\t\"category\": category->name,\n\t\tcode,\n\t\tcapacity,\n\t\tspeed,\n\t\trange,\n\t\timage\n\t}\n": FLEET_PAGE_QUERYResult;
    "\n\t*[_type == \"about\"][0]{\n\t\tstorySection,\n\t\tteamSection,\n\t\tstatsSection\n}": ABOUT_PAGE_QUERYResult;
    "\n\t*[_type == \"contact\"][0]{\n\t\tcontactSection,\n\t\tlocationSection\n}": CONTACT_PAGE_QUERYResult;
    "\n  *[_type == \"policy\" && slug.current == $slug][0] {\n    \"id\": _id,\n    \"updatedAt\": _updatedAt,\n    title,\n    \"slug\": slug.current,\n    content,\n  }\n": POLICY_BY_SLUG_QUERYResult;
    "\n\t*[_type == \"fuelService\"][0]{\n\t\theroSection,\n\t\tfeaturesSection,\n\t\tgallerySection,\n\t}": FUEL_SERVICE_PAGE_QUERYResult;
    "\n\t*[_type == \"linktree\"][0]{\n\t\theroSection,\n    links\n}": LINKTREE_PAGE_QUERYResult;
    "\n\t*[_type == \"services\"][0]{\n\t\ttitle,\n\t\theroSection,\n\t\t\"tripService\": *[_type == \"tripService\"][0]{\n\t\t\tcard\n\t\t},\n\t\t\"fuelService\": *[_type == \"fuelService\"][0]{\n\t\t\tcard\n\t\t},\n\t}": SERVICES_PAGE_QUERYResult;
    "\n\t*[_type == \"tripService\"][0]{\n\t\theroSection,\n\t\tfeaturesSection,\n\t\tgallerySection,\n\t}": TRIP_SERVICE_PAGE_QUERYResult;
    "\n\t{\n\t\t\"policies\": *[_type == \"policy\"]{\n\t\t\t\"id\": _id, \n\t\t\ttitle,\n\t\t\t\"slug\": slug.current,\n\t\t\tcontent,\n\t\t},\n\t\t\"newsletter\": *[_type == \"home\"][0]{\n\t\t\t\"section\": newsletterSection.section,\n\t\t}\n\t}\n\t": FOOTER_QUERYResult;
    "\n  *[_type == \"planeCategory\"]{\n    _id,\n    name\n  }\n": ALL_PLANE_CATEGORIES_QUERYResult;
    "\n  *[_type == \"planeManufacturer\"]{\n    _id,\n    name\n  }\n": ALL_PLANE_MANUFACTURERS_QUERYResult;
    "\n\t*[_type == \"inquiry\"][0]{\n\t\theroSection,\n\t\tformSection\n\t}\n": INQUIRY_PAGE_QUERYResult;
    "\n\t*[_type == \"newsletter\"][0]{\n\t\theroSection,\n\t\tformSection\n\t}\n": NEWSLETTER_PAGE_QUERYResult;
    "\n\t*[_type == \"emptyLeg\"] {\n\t\tfrom,\n\t\tto,\n\t\tdepartureTime,\n\t\tarrivalTime,\n\t}\n": EMPTY_LEGS_QUERYResult;
  }
}
